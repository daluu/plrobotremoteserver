#summary Items to address/discuss for remote server development

= Introduction =

The Perl code here is not fully functional, but is provided as a starting base for a working prototype.

It is my hope and intention that the Perl and open source community can offer contributions to turn this sample code into a working prototype. Contributions in terms of source code changes/additions, or advice/tips for suggested changes. Later on, could use "testers" to test out the working prototype.

FYI, this code here is for a remote server interface for remote test libraries built with Perl for use with [http://www.RobotFramework.org Robot Framework]. See http://code.google.com/p/robotframework/wiki/RemoteLibrary for more info.

Robot Framework currently has remote server implementations (and thus support) for Python, Ruby, .NET, and Java. The Robot Framework project would also like to have a Perl version but no one had the resource or expertise to build one. I made an attempt and this is it. 

I don't see why we can't build a Perl version. I don't think it may be that hard, but since I'm not a Perl guru, and Perl is one of those few languages that can be very simple to very cryptically complex, I need your help...

Check out the source code, review it, then run code and try it out for yourself to see the current issues mentioned below.

*Update:* Thanks to user ysth, for help with my post here to get the server more functional: http://stackoverflow.com/questions/6086584/problems-with-perl-xml-rpc-in-combination-with-perl-reflection

= Issues with current code =

== XML-RPC requests to methods may not work as intended ==

Making XML-RPC calls to the server:

http://host:port/RPC2 where default host = localhost, port = 8270

with a (POST data) request like this

{{{
<?xml version='1.0' encoding='UTF-8'?>
 <methodCall>
  <methodName>run_keyword</methodName>
  <params>
   <param>
    <value>
     <string>strings_should_be_equal</string>
    </value>
   </param>
   <param>
    <value>
     <array>
      <data>
       <value>
        <string>hello</string>
       </value>
       <value>
        <string>hello</string>
       </value>
      </data>
     </array>
    </value>
   </param>
  </params>
 </methodCall>
}}}

should not return error message like this following XML. The XML response data structure is correct, but the data returned is not. For correct data to be returned, see the local execution example below for same method that presents the correct data for the same data structure (but not in XML form).

{{{
<?xml version="1.0"?>
<methodResponse>
 <params>
  <param>
   <value>
    <struct>
     <member><name>Return</name><value><string></string></value></member>
     <member><name>status</name><value><string>FAIL</string></value></member>
     <member><name>traceback</name><value><string>Given strings are not equal at ExampleLibrary.pm line 30.
</string></value></member>
     <member><name>error</name><value><string>Given strings are not equal at ExampleLibrary.pm line 30.
</string></value></member>
     <member><name>output</name><value><string>Given strings are not equal at ExampleLibrary.pm line 30.
</string></value></member>
    </struct>
   </value>
  </param>
 </params>
</methodResponse>
}}}

Same occurs for calling other supported keywords. In my debugging, this is what I see printed out to stdout when XML-RPC request is made:

{{{
  method = strings_should_be_equal
  RPC args:
  ARRAY(0x1da61dc)

  Comparing 'ARRAY(0x1da61dc)' to ''
}}}

whereas local execution (non-XML-RPC request) output shows correct behavior of:

{{{
  method = strings_should_be_equal
  RPC args:
  hello
  hello

  Comparing 'hello' to 'hello'
  output is...
  Return =>
  status => PASS
  traceback =>
  error =>
  output =>
}}}

*NOTE:* that the member => value shown for local execution will not show for debug output of XML-RPC request. But you can see same result as an XML-RPC response in that case.

The failure case for local output would look like this:

{{{

  method = strings_should_be_equal
  RPC args:
  hello
  world

  Comparing 'hello' to 'world'
  output is...
  Return =>
  status => FAIL
  traceback => Given strings are not equal at ExampleLibrary.pm line 30.

  error => Given strings are not equal at ExampleLibrary.pm line 30.

  output => Given strings are not equal at ExampleLibrary.pm line 30.
}}}

It seems like an array or function/subroutine argument list reference issue when using over XML-RPC. Can't pinpoint the problem myself though.

See the script file (exampleremoteserver.pl) executed for how the code is implemented for details.

== How should the server work? ==

It should conform to the Robot Framework specs at

http://code.google.com/p/robotframework/wiki/RemoteLibrary

and

http://robotframework.googlecode.com/svn/tags/robotframework-2.5.6/doc/userguide/RobotFrameworkUserGuide.html#remote-library-interface

And should work similarly to the other remote server implementations. Python version referenced in the Robot Framework specs pages.

.NET and Java versions to compare here:

http://code.google.com/p/sharprobotremoteserver/

http://code.google.com/p/jrobotremoteserver/

== How to use the code ==

See UsageInfo.