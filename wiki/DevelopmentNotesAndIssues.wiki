#summary Items to address/discuss for remote server development

= Introduction =

The Perl code here is not fully functional, but is provided as a starting base for a working prototype.

It is my hope and intention that the Perl and open source community can offer contributions to turn this sample code into a working prototype. Contributions in terms of source code changes/additions, or advice/tips for suggested changes. Later on, could use "testers" to test out the working prototype.

FYI, this code here is for a remote server interface for remote test libraries built with Perl for use with [http://www.RobotFramework.org Robot Framework]. See http://code.google.com/p/robotframework/wiki/RemoteLibrary for more info.

Robot Framework currently has remote server implementations (and thus support) for Python, Ruby, .NET, and Java. The Robot Framework project would also like to have a Perl version but no one had the resource or expertise to build one. I made an attempt and this is it. 

I don't see why we can't build a Perl version. I don't think it may be that hard, but since I'm not a Perl guru, and Perl is one of those few languages that can be very simple to very cryptically complex, I need your help...

Check out the source code, review it, then run code and try it out for yourself to see the current issues mentioned below.

= Issues with current code =

== XML-RPC requests to methods don't work as intended ==

Making XML-RPC calls to the server:

http://host:port/RPC2 where default host = localhost, port = 8270

with a (POST data) request like this

{{{
<?xml version='1.0' encoding='UTF-8'?>
 <methodCall>
  <methodName>get_keyword_names</methodName>
  <params></params>
 </methodCall>
}}}

results in output like this

{{{
<?xml version="1.0"?>
 <methodResponse>
  <params>
   <param>
    <value>
     <i4>1</i4>
    </value>
   </param>
  </params>
 </methodResponse>
}}}

when it should be an array of strings of keyword names instead of a single integer value of 1. See local execution example below, for what kind of list (w/o XML) that it should present. In terms of XML-RPC, the response would have the array encapsulated as an XML-RPC response with an XML-RPC array.

Sending request like this

{{{
<?xml version='1.0' encoding='UTF-8'?>
 <methodCall>
  <methodName>run_keyword</methodName>
  <params>
   <param>
    <value>
     <string>strings_should_be_equal</string>
    </value>
   </param>
   <param>
    <value>
     <array>
      <data>
       <value>
        <string>hello</string>
       </value>
       <value>
        <string>world</string>
       </value>
      </data>
     </array>
    </value>
   </param>
  </params>
 </methodCall>
}}}

should not return error message like this following XML. The XML response data structure is correct, but the data returned is not. For correct data to be returned, see the local execution example below for same method that presents the correct data for the same data structure (but not in XML form).

{{{
<?xml version="1.0"?>
 <methodResponse>
  <params>
   <param>
    <value>
     <struct>
      <member>
       <name>Return</name>
       <value><string></string></value>
      </member>
      <member>
       <name>status</name>
       <value><string>FAIL</string></value>
      </member>
      <member>
       <name>traceback</name>
       <value><string>Can't call method &quot;ARRAY(0x1d5599c)&quot; on an undefined value at RobotRemoteServer.pm line 98.
</string></value>
      </member>
      <member>
       <name>error</name>
       <value><string>Can't call method &quot;ARRAY(0x1d5599c)&quot; on an undefined value at RobotRemoteServer.pm line 98.
</string></value>
      </member>
      <member>
       <name>output</name>
       <value><string>Can't call method &quot;ARRAY(0x1d5599c)&quot; on an undefined value at RobotRemoteServer.pm line 98.
</string></value>
      </member>
     </struct>
    </value>
   </param>
  </params>
 </methodResponse>
}}}

shouldn't throw exception like this. Same occurs for calling other supported keywords. In my debugging, this is what I see printed out to stdout:

{{{
  method = ARRAY(0x1d5599c)
  RPC args:
  
  
}}}

and I find that method appears to be an array of 16 elements with nothing in it (blank/null). The XML-RPC args is 1 element but blank as well. Method should always be single element, not array, and XML-RPC args should be 0 or more element array.

Review the code sources to see more details.

To summarize here, it seems there is some issue using reflection over XML-RPC calls, as it seems to work fine locally. See next section.

== Code appears to work fine when executed locally rather than over XML-RPC ==

Whether executing locally or over XML-RPC, the code uses Perl reflection to do the job.

{{{
  F:\Temp>perl exampleremoteserver.pl
Debugging info: showing details of local execution...

keywords:
rule
count_items_in_directory
find
strings_should_be_equal
stop_remote_server

running keywords:

method = strings_should_be_equal
RPC args:
hello
world

Comparing 'hello' to 'world'
Return =>
status => FAIL
traceback => Given strings are not equal at ExampleLibrary.pm line 30.

error => Given strings are not equal at ExampleLibrary.pm line 30.

output => Given strings are not equal at ExampleLibrary.pm line 30.


method = count_items_in_directory
RPC args:
C:\Temp

Return => 26
status => PASS
traceback =>
error =>
output =>

Shutting down remote server/library, from Robot Framework/XML-RPC request, in 5
seconds
Return =>
status => PASS
traceback =>
error =>
output => NOTE: remote server shutting/shut down.

Robot remote server started. Stop server with Ctrl+C, kill, etc. or XML-RPC meth
od 'run_keyword' with parameter 'stop_remote_server'

Debugging info: here is where we have XML-RPC problems with Perl reflection once
 try use XML-RPC. As can see from runtime demo above, no issues using reflection
 locally.

Remote server/library shut down at 21May2011-22:37:31


F:\Temp>
}}}

and here is an excerpt sample of what it would look like if we disabled stopping server remotely:

{{{
...
Return =>
status => PASS
traceback =>
error =>
output => NOTE: remote server not configured to allow remote shutdowns. Your req
uest has been ignored.

Robot remote server started. Stop server with Ctrl+C, kill, etc. or XML-RPC meth
od 'run_keyword' with parameter 'stop_remote_server'

...get stdout msg for debug of XML-RPC calls like this...
method = ARRAY(0x1da530c)
RPC args:


Terminating on signal SIGINT(2)

F:\Temp>
}}}

See the script file executed for how the code is implemented for details.

== How should the server work? ==

It should conform to the Robot Framework specs at

http://code.google.com/p/robotframework/wiki/RemoteLibrary

and

http://robotframework.googlecode.com/svn/tags/robotframework-2.5.6/doc/userguide/RobotFrameworkUserGuide.html#remote-library-interface

And should work similarly to the other remote server implementations. Python version referenced in the Robot Framework specs pages.

.NET and Java versions to compare here:

http://code.google.com/p/sharprobotremoteserver/

http://code.google.com/p/jrobotremoteserver/

== How to use the code ==

See UsageInfo.